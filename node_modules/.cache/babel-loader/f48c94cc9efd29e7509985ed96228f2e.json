{"ast":null,"code":"import { createElement } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"cdnSuffix\", \"cdnUrl\", \"countryCode\", \"style\", \"svg\"];\nvar DEFAULT_CDN_URL = 'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/4.1.4/flags/4x3/';\nvar DEFAULT_CDN_SUFFIX = 'svg'; // offset between uppercase ascii and regional indicator symbols\n\nvar OFFSET = 127397;\n\nvar ReactCountryFlag = function ReactCountryFlag(_ref) {\n  var _ref$cdnSuffix = _ref.cdnSuffix,\n      cdnSuffix = _ref$cdnSuffix === void 0 ? DEFAULT_CDN_SUFFIX : _ref$cdnSuffix,\n      _ref$cdnUrl = _ref.cdnUrl,\n      cdnUrl = _ref$cdnUrl === void 0 ? DEFAULT_CDN_URL : _ref$cdnUrl,\n      countryCode = _ref.countryCode,\n      style = _ref.style,\n      _ref$svg = _ref.svg,\n      svg = _ref$svg === void 0 ? false : _ref$svg,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    var flagUrl = \"\" + cdnUrl + countryCode.toLowerCase() + \".\" + cdnSuffix;\n    return createElement(\"img\", Object.assign({}, props, {\n      src: flagUrl,\n      style: _extends({\n        display: 'inline-block',\n        width: '1em',\n        height: '1em',\n        verticalAlign: 'middle'\n      }, style)\n    }));\n  }\n\n  var emoji = countryCode.toUpperCase().replace(/./g, function (_char) {\n    return String.fromCodePoint(_char.charCodeAt(0) + OFFSET);\n  });\n  return createElement(\"span\", Object.assign({\n    role: \"img\"\n  }, props, {\n    style: _extends({\n      display: 'inline-block',\n      fontSize: '1em',\n      lineHeight: '1em',\n      verticalAlign: 'middle'\n    }, style)\n  }), emoji);\n};\n\nexport default ReactCountryFlag;\nexport { ReactCountryFlag };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GACnB,uEADF;AAEA,IAAMC,kBAAkB,GAAG,KAA3B,C,CAAA;;AAGA,IAAMC,MAAM,GAAG,MAAf;;IAoBaC,gBAAgB,GAAG,SAAnBA,gBAAmB;4BAC9BC;MAAAA,wCAAYH,kBAAZG,GAAYH;yBACZI;MAAAA,kCAASL,eAATK,GAASL;MACTM;MACAC;sBACAC;MAAAA,4BAAM,KAANA,GAAMC;MACHC;;EAEH,IAAI,OAAOJ,WAAP,KAAuB,QAA3B,EAAqC;IACnC,OAAO,IAAP;EACD;;EAED,IAAIE,GAAJ,EAAS;IACP,IAAMG,OAAO,QAAMN,MAAN,GAAeC,WAAW,CAACM,WAAZN,EAAf,SAA4CF,SAAzD;IAEA,OACES,uCACMH,KADN,EACMA;MACJI,GAAG,EAAEH,OADDD;MAEJH,KAAK;QACHQ,OAAO,EAAE,cADN;QAEHC,KAAK,EAAE,KAFJ;QAGHC,MAAM,EAAE,KAHL;QAIHC,aAAa,EAAE;MAJZ,GAKAX,KALA;IAFDG,CADN,EADF;EAaD;;EAED,IAAMS,KAAK,GAAGb,WAAW,CACtBc,WADWd,GAEXe,OAFWf,CAEH,IAFGA,EAEG,iBAAI;IAAA,OAAIgB,MAAM,CAACC,aAAPD,CAAqBE,KAAI,CAACC,UAALD,CAAgB,CAAhBA,IAAqBtB,MAA1CoB,CAAJ;EAFP,EAAd;EAIA,OACET;IACEa,IAAI,EAAC;EADP,GAEMhB,KAFN,EAEMA;IACJH,KAAK;MACHQ,OAAO,EAAE,cADN;MAEHY,QAAQ,EAAE,KAFP;MAGHC,UAAU,EAAE,KAHT;MAIHV,aAAa,EAAE;IAJZ,GAKAX,KALA;EADDG,CAFN,GAWGS,KAXH,CADF;AAeD","names":["DEFAULT_CDN_URL","DEFAULT_CDN_SUFFIX","OFFSET","ReactCountryFlag","cdnSuffix","cdnUrl","countryCode","style","svg","_ref$svg","props","flagUrl","toLowerCase","React","src","display","width","height","verticalAlign","emoji","toUpperCase","replace","String","fromCodePoint","char","charCodeAt","role","fontSize","lineHeight"],"sources":["/home/nick/Projects/Pizza App/PizzaSite/node_modules/react-country-flag/src/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_CDN_URL =\n  'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/4.1.4/flags/4x3/';\nconst DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\ninterface EmojiProps extends React.HTMLAttributes<HTMLSpanElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: false;\n}\n\ninterface ImgProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: true;\n}\n\nexport type ReactCountryFlagProps = EmojiProps | ImgProps;\n\nexport const ReactCountryFlag = ({\n  cdnSuffix = DEFAULT_CDN_SUFFIX,\n  cdnUrl = DEFAULT_CDN_URL,\n  countryCode,\n  style,\n  svg = false,\n  ...props\n}: ReactCountryFlagProps) => {\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${cdnSuffix}`;\n\n    return (\n      <img\n        {...props}\n        src={flagUrl}\n        style={{\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  const emoji = countryCode\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + OFFSET));\n\n  return (\n    <span\n      role=\"img\"\n      {...props}\n      style={{\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n    >\n      {emoji}\n    </span>\n  );\n};\n\nexport default ReactCountryFlag;\n"]},"metadata":{},"sourceType":"module"}